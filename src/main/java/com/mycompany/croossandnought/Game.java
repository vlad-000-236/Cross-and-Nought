package com.mycompany.croossandnought;
/**
 *
 * @author vlad__236
 */

/*
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Описание:
Данный класс содержит метод "main", собирает игру воедино и следит за её ходом: 
проверяет, есть ли еще доступные для хода ячейки на поле, передаёт ход 
от крестика к нолику и наоборот, проверяет, не занята ли ячейка, которую для 
хода выбрал игрок, в случае ничьей выдаёт соответсвующее сообщение.
Программа рассчитана только на двух пользователей и не предусматривает игру 
против компьютером.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Принцип работы:
В начале своей работы класс создает экземпляры других классов, необходимых 
для функционирования игры ("w" - ссылочная переменная класса "WinCombinations", 
"fielder" - ссылочная пересенная класса "Fielder", "p" - ссылочная пересенная 
класса "Player"). Следом экземпляр класса "Fielder" выполняет метод "GUI"
для отрисовки поля. Затем запускается цикл "for", который будет следить за тем,
сколько ходов осталось до ничьей. Если в процессе игры не собирется победная 
комбинация - данный цикл успешно завершиться и выдаст сообщение о ничьей, 
в противном случае программа досрочно выйдет из цикла. Условный оператор
"if (amountTurnes %2 == 0)" следит за тем, кто сейчас должен ходить, крестик или 
нолик (если переменная "amountTurnes" нечётная - ходит крестик, если
чётная - нолик). Программа вызывает метод "turnOfPlayer()" класса "Player",
который принимает принимает и проверяет на соответсвие ход игрока (является ли
введёный символ целочисленной цифров в диапазоне от 1 до 9). Если условие
проверок не соблюдается, игра выдаёт соответсвующую ошибку и ожидает новый ответ
от игрока. Далее программа переходит в цикл "while", который проверяет, свободна 
ли ячейка поля, которую указал в качестве хода игрок. Пока данное условие 
не станет "true", программа не покинет этот метод. После успешного выхода 
из цикла "while", соответсвующей ответу игрока ячейке поля присваивается знак 
"Х" или "О" в зависимости от того, чей сейчас ход. Далее экземпляр класса 
"Fielder" вновь выполняет метод "GUI", чтобы отрисовать игровое поле 
с изменёнными ячейками. После этого, в зависимости от того, чей сейчас был ход,
ответ игрока передаётся в метод "xWinChecker", если ходил крестик, или 
в метод "оWinChecker", если ходил нолик. Далее программа проверяет значение 
переменной "win" класса "WinCombinations", вызывая метод "getWin()". Если 
её значение не равно "true" - игра продолжается до тех пор, пока либо переменная 
не примет значение "true", что будет означать победу одного из игроков и 
повлечёт преждевременный выход из цикла "for", либо пока переменная 
"int amountTurnes" цикла "for" не достигнет 10, что приведёт к успешному выходу 
из данного цикла. Успешный выход из цикла означает, что на протяжении всей игры 
никто из игроков не смог собрать выйгрышную комбинацию, т.е. игра окончилась 
ничьей.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Переменные:
w - ссылочная переменная экземпляра класса "WinCombinations";

field - ссылочная переменная экземпляра класса "Fielder";

p - ссылочная переменная экземпляра класса "Player";

int amountTurnes - переменная, выступающая счётчиком ходов. Используется для
вычисления оставшегося количества ходов до полного заполнения игрового поля, а
так же она используется для выяснения, чей сейчас ход.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
*/

public class Game {

    /**
     * @param args the command line arguments
     */
    
    public static void main(String[] args) {
        // TODO code application logic here
       WinCombinations w = new WinCombinations();
       Fielder field = new Fielder();
       Player p = new Player();
       
       
        field.GUI();
        
            for  (int amountTurnes = 1; amountTurnes < 10; amountTurnes++){     
                if (amountTurnes %2 == 0)
                {
                    System.out.println(" ");
                    System.out.println("Ход игрока нолика пожалуйста "
                            + "введите ход:");
                    System.out.println(" ");
                    p.turnOfPlayer();
                           while (field.index [p.getPlayerTurn()]!= '_'){
                                System.out.println("Данная ячейка уже занята! "
                                        + "Пожалуйста, выберите другой ход:");
                                System.out.println(" ");
                                p.turnOfPlayer();
                            }
                    field.index [p.getPlayerTurn()] = 'O';
                    field.GUI();
                    w.oWinChecker(p.getPlayerTurn());
                }
                else {
                    System.out.println(" ");
                    System.out.println("Ход игрока крестика, "
                            + "пожалуйста введите ход: ");
                    System.out.println(" ");
                    p.turnOfPlayer();

                           while (field.index [p.getPlayerTurn()]!= '_'){
                                System.out.println("Данная ячейка уже занята! "
                                        + "Пожалуйста, выберите другой ход:");
                                System.out.println(" ");
                                p.turnOfPlayer();
                            }
                    field.index [p.getPlayerTurn()] = 'X';
                    field.GUI();
                    w.xWinChecker(p.getPlayerTurn());
                }
                if (w.getWin() == true){
                    System.out.println ("Игра окончена.");
                    break;
                }   
            }
            if (w.getWin() == false){
                System.out.println(" ");
                System.out.println("Ничья! Доступных клеток не осталось. "
                        + "Спасибо за игру.");
            }
    }
}
